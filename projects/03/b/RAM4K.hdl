// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/b/RAM4K.hdl

/**
 * Memory of 4K registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM4K {
    IN in[16], load, address[12];
    OUT out[16];

    PARTS:
    // use dmux 8 to set the right load bit based on the first 3 bits of the
    // selector.
    DMux8Way12Bit(in=load, sel=address, a=rama, b=ramb, c=ramc, d=ramd, e=rame, f=ramf, g=ramg, h=ramh);
    RAM512(in=in, load=rama, address=address[3..11], out=ramaout); 
    RAM512(in=in, load=ramb, address=address[3..11], out=rambout);
    RAM512(in=in, load=ramc, address=address[3..11], out=ramcout);
    RAM512(in=in, load=ramd, address=address[3..11], out=ramdout);
    RAM512(in=in, load=rame, address=address[3..11], out=rameout);
    RAM512(in=in, load=ramf, address=address[3..11], out=ramfout);
    RAM512(in=in, load=ramg, address=address[3..11], out=ramgout);
    RAM512(in=in, load=ramh, address=address[3..11], out=ramhout);
    Mux8Way16And12BitSel(a=ramaout, b=rambout, c=ramcout, d=ramdout, e=rameout,
    f=ramfout, g=ramgout, h=ramhout, sel=address, out=out);

    // Put your code here:
}
